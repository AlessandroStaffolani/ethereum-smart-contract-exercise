const assert = require('assert');
const ganache = require('ganache-cli');
const Web3 = require('web3');
// The Web3 constructor takes as argument a provider.
// A provider is a communication layer between the Ethereum network (ganache in this case) and the web3 library
//
const web3 = new Web3(ganache.provider());

const { interface, bytecode } = require('../compile');

let lottery;
let accounts;

const NUM_PLAYERS_TESTED = 5

// At before starting let's deploy a new instance of our contract in the Ganache test network
beforeEach(async () => {
    // Ganache creates a set of unlocked accounts for us in order to use them to deploy and operating with the contract
    // Unlocked means they don't need private keys, ecc in order to use them
    accounts = await web3.eth.getAccounts();

    // Let's use the first account to deploy the contract
    // Then compile the bytecode generated by the compile script
    lottery = await new web3.eth.Contract(JSON.parse(interface))  // ABI goes to the constructor of the Contract
        .deploy({ data: bytecode, arguments: [] })  // the bytecode is used for deploying the contract, if the contract constructor has some arguments they need to be passed here to the arguments keys
        .send({from: accounts[0], gas: '1000000'});  // specify the transaction which creates the contract with a gas limit of 1 million wei
});

describe('Lottery contract', () => {
    it('deploys a contract', () => {
        assert.ok(lottery.options.address);
    });

    it('allows one account to enter', async () => {
        await lottery.methods.enter().send({
            from: accounts[0],
            value: web3.utils.toWei('0.00002', 'ether')
        });

        const players = await lottery.methods.getPlayers().call({
            from: accounts[0]
        });

        assert.strictEqual(accounts[0], players[0]);
        assert.strictEqual(1, players.length);
    });

    it('allows multiple account to enter', async () => {
        for (let i = 0; i < NUM_PLAYERS_TESTED; i++) {
            await lottery.methods.enter().send({
                from: accounts[i],
                value: web3.utils.toWei('0.00002', 'ether')
            });
        }

        const players = await lottery.methods.getPlayers().call({
            from: accounts[0]
        });

        for (let i = 0; i < NUM_PLAYERS_TESTED; i++) {
            assert.strictEqual(accounts[i], players[i]);
        }
        assert.strictEqual(NUM_PLAYERS_TESTED, players.length);
    });

    it('requires a minimum amount of ether to enter', async () => {
        try {
            await lottery.methods.enter().send({
                from: accounts[0],
                value: 0
            });
            assert(false);
        } catch (err) {
            assert(err);
        }
    });

    it('only manager can call pickWinner', async () => {
        try {
            await lottery.methods.pickWinner().send({
                from: accounts[1]
            });
            assert(false);
        } catch (err) {
            assert(err);
        }
    });

    it('sends money to the winner and resets the players array', async () => {
        await lottery.methods.enter().send({
            from: accounts[0],
            value: web3.utils.toWei('2', 'ether')
        });

        const initialBalance = await web3.eth.getBalance(accounts[0]);
        await lottery.methods.pickWinner().send({ from: accounts[0] });
        const finalBalance = await web3.eth.getBalance(accounts[0]);
        const difference = finalBalance - initialBalance;

        assert(difference > web3.utils.toWei('1.8', 'ether'));

        const players = await lottery.methods.getPlayers().call({ from: accounts[0] })
        assert.strictEqual(0, players.length);

        const lotteryBalance = await web3.eth.getBalance(lottery.options.address);
        assert.strictEqual(web3.utils.toWei('0', 'ether'), lotteryBalance);
    });
});

